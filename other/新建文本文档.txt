entity top_entity is
      Port ( 
            clk:IN std_logic;      --时钟信号
            flag1:buffer std_logic;
            datain:IN std_logic;
            confirm:IN std_logic;  --按钮“确定”
            back:IN std_logic;     --按钮“返回”
            up:IN std_logic;       --按钮“加一”
            down:IN std_logic;     --按钮“减一”
            led:OUT std_logic_vector(3 downto 0);    --四个LED灯，表示1元、5元、10元、20元
            switch:IN std_logic_vector(3 downto 0);  --四个开关，投入1元、5元、10元、20元
            num:OUT std_logic_vector( 7 downto 0 );  --数码管模块的第几位数
            dig:OUT std_logic_vector( 7 downto 0 );  --数码管模块的具体管脚
);
end top_entity;
architecture Behavioral of top_entity is
type state_type is(s1,s2,s3,s4,s5,s6,s7,s8,s9,s10);  --共十种状态，等待，选当前站线路，选当前站站点，选票价，选目的站线路，选目的站站点，选票数，投币状态，找零出票状态，退币成功
signal presentstate:state_type;
signal nextstate:state_type;
begin
switch_to_next_state:process(clk)  --第一个process
begin
if (clk'event and clk='1') then
presentstate<=nextstate;
end if;
end process switch_to_next_state;

change_state_mode:process(confirm,back,up,down,presentstate)  --第二个process
begin
case presentstate is
  when s1=>  --s1等待状态
    if (confirm='1' or back='1' or up='1' or down='1') then
    nextstate<=s2;
    end if;
  when s2=>  --选当前站线路状态
    if (confirm='1') then nextstate<=s3;end if;
    if (back='1') then nextstate<=s1;end if;
  when s3=>  --选当前站站点状态
    if (up='1') then nextstate<=s4;end if;
    if (down='1') then nextstate<=s5;end if;
    if (back='1') then nextstate<=s2;
    end if;
    flag1<='1';
  when s4=>  --选票价状态
    if (confirm='1') then nextstate<=s5;end if;
    if (back='1') then nextstate<=s3;end if;
    flag1<='0';
  when s5=>  --选目的站线路状态
    if (confirm='1') then nextstate<=s6;end if;
    if (back='1') then
      if (flag1='1') then nextstate<=s3;
      else if (flag1='0') then nextstate<=s4;
      end if;
      end if;
    end if;
  when s6=>  --选目的站站点状态
    if (confirm='1') then nextstate<=s7;end if;
    if (back='1') then nextstate<=s5;end if;
  when s7=>  --选票数状态
    if (confirm='1') then nextstate<=s8;end if;
    if (back='1') then nextstate<=s6;end if;
  when s8=>  --投币状态
    if (back='1') then nextstate<=s10;  --还没写如果钱够了下一个状态是s9（找零出票状态）的情况
    end if; 
    if (switch="0001") then led<="0001";end if;
    if (switch="0010") then led<="0010";end if;
    if (switch="0100") then led<="0100";end if;
    if (switch="1000") then led<="1000";end if;
  when others=>   --初始状态是s1
    nextstate<=s1;
end case; --case里还少了s9到s10（退币成功状态）和s10到s1的情况
end process change_state_mode;


end Behavioral;


create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports {clk_i}];



module VGA(
    input clk,
    input rst,
    input en,
    input we,
    input [15:0] din,
    input [9:0] addr,
    output[15:0]dout
    );
blk_mem_gen_0 uut
(
.clka(clk),
.rsta(rst),
.ena(en),
.wea(we),
.addra(addr),
.dina(din),
.douta(dout)
);    
endmodule


module mem_gen;
reg clk =0;
reg rst = 0;
reg we = 0;
reg en =1;
reg[15:0]din=0;
reg[9:0]addr=0;
wire[15:0]dout;
reg[9:0]cnt1 = 0;
reg[9:0]cnt2 = 0;
VGA ss(clk,rst,en,we,din,addr,dout);
always #10 clk = ~clk;
always @(posedge clk)
begin
    if(cnt1 == 8)
    begin
        cnt1 = 0;
        cnt2 = cnt2 + 1;
    end
else
begin
        cnt1 = cnt1+1;
end
end
always @(negedge clk)
begin
    din = cnt1;
        addr = cnt1;
    if(cnt2[0] == 0) we = 0;
    else we = 1;
end

endmodule




  process (pxl_clk)
  begin
    if (rising_edge(pxl_clk)) then
      if (h_cntr_reg = (H_MAX - 1)) then
        h_cntr_reg <= (others =>'0');
      else
        h_cntr_reg <= h_cntr_reg + 1;
      end if;
    end if;
  end process;
  -- Vertical counter
  process (pxl_clk)
  begin
    if (rising_edge(pxl_clk)) then
      if ((h_cntr_reg = (H_MAX - 1)) and (v_cntr_reg = (V_MAX - 1))) then
        v_cntr_reg <= (others =>'0');
      elsif (h_cntr_reg = (H_MAX - 1)) then
        v_cntr_reg <= v_cntr_reg + 1;
      end if;
    end if;
  end process;
  -- Horizontal sync
  process (pxl_clk)
  begin
    if (rising_edge(pxl_clk)) then
      if (h_cntr_reg >= (H_FP + FRAME_WIDTH - 1)) and (h_cntr_reg < (H_FP + FRAME_WIDTH + H_PW - 1)) then
        h_sync_reg <= H_POL;
      else
        h_sync_reg <= not(H_POL);
      end if;
    end if;
  end process;
  -- Vertical sync
  process (pxl_clk)
  begin
    if (rising_edge(pxl_clk)) then
      if (v_cntr_reg >= (V_FP + FRAME_HEIGHT - 1)) and (v_cntr_reg < (V_FP + FRAME_HEIGHT + V_PW - 1)) then
        v_sync_reg <= V_POL;
      else
        v_sync_reg <= not(V_POL);
      end if;
    end if;
  end process;

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use ieee.math_real.all;
  
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

 	Inst_LogoDisplay: LogoDisplay 
	GENERIC MAP(
		X_START	=> FRM_LOGO_H_LOC,
		Y_START	=> FRM_LOGO_V_LOC
	)
	PORT MAP(
		CLK_I => pxl_clk,
		H_COUNT_I => h_cntr_reg,
		V_COUNT_I => v_cntr_reg,
		RED_O    => logo_red,
		BLUE_O   => logo_blue,
		GREEN_O  => logo_green
	);


entity LogoDisplay is
	 Generic (
			  X_START : integer range 2 to (Integer'high) := 40;
           Y_START : integer := 512
	 );
    Port ( CLK_I : in  STD_LOGIC;
           H_COUNT_I : in  STD_LOGIC_VECTOR(11 downto 0);
           V_COUNT_I : in  STD_LOGIC_VECTOR(11 downto 0);
           RED_O : out  STD_LOGIC_VECTOR(3 downto 0);
           BLUE_O : out  STD_LOGIC_VECTOR(3 downto 0);
           GREEN_O : out  STD_LOGIC_VECTOR(3 downto 0));
end LogoDisplay;

architecture Behavioral of LogoDisplay is

constant SZ_LOGO_WIDTH 	   : natural := 335; -- Width of the logo frame
constant SZ_LOGO_HEIGHT 	: natural := 280; -- Height of the logo frame

COMPONENT BRAM_1
  PORT (
    clka : IN STD_LOGIC;
    addra : IN STD_LOGIC_VECTOR(16 DOWNTO 0);
    douta : OUT STD_LOGIC_VECTOR(11 DOWNTO 0)
  );
END COMPONENT;

signal addr_reg : std_logic_vector(16 downto 0) := (others => '0');
signal douta	: std_logic_vector(11 downto 0);
signal rst		: std_logic;
signal en		: std_logic;

begin

-- BRAM containing the logo data, 
-- content in the BRAM_1.ngc file
 Inst_BRAM_1 : BRAM_1
 PORT MAP (
	clka => CLK_I,
	addra => addr_reg,
	douta => douta
 );

-- Restart Address Counter when Vcount arrives to the beginning of the Logo frame
rst <= '1' when (H_COUNT_I = 0 and V_COUNT_I = Y_START-1) else '0';

-- Increment Address counter only inside the frame
en <= '1' when (H_COUNT_I > X_START-2 and H_COUNT_I < X_START + SZ_LOGO_WIDTH - 1 
            and V_COUNT_I > Y_START and V_COUNT_I < Y_START + SZ_LOGO_HEIGHT -1 ) 
          else '0';

-- Address counter
process (CLK_I, rst, en)
begin
	if(rising_edge(CLK_I))then 
		if(rst = '1') then
			addr_reg <= (others => '0');
		elsif(en = '1') then
			addr_reg <= addr_reg + 1;
		end if;
	end if;	

end process;

-- Assign Outputs
RED_O <= douta(11 downto 8);
BLUE_O <= douta(3 downto 0);
GREEN_O <= douta(7 downto 4);


end Behavioral;


--constant FRAME_WIDTH : natural := 640;
--constant FRAME_HEIGHT : natural := 480;

--constant H_FP : natural := 16; --H front porch width (pixels)
--constant H_PW : natural := 96; --H sync pulse width (pixels)
--constant H_MAX : natural := 800; --H total period (pixels)
--
--constant V_FP : natural := 10; --V front porch width (lines)
--constant V_PW : natural := 2; --V sync pulse width (lines)
--constant V_MAX : natural := 525; --V total period (lines)

--constant H_POL : std_logic := '0';
--constant V_POL : std_logic := '0';

--***800x600@60Hz***--
--constant FRAME_WIDTH : natural := 800;
--constant FRAME_HEIGHT : natural := 600;
--
--constant H_FP : natural := 40; --H front porch width (pixels)
--constant H_PW : natural := 128; --H sync pulse width (pixels)
--constant H_MAX : natural := 1056; --H total period (pixels)
--
--constant V_FP : natural := 1; --V front porch width (lines)
--constant V_PW : natural := 4; --V sync pulse width (lines)
--constant V_MAX : natural := 628; --V total period (lines)
--
--constant H_POL : std_logic := '1';
--constant V_POL : std_logic := '1';